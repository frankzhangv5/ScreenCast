name: Build and Package

on:
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw'
    
    - name: Install Inno Setup
      run: |
        # Download and install Inno Setup 6
        $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $output = "$env:TEMP\innosetup-6.2.2.exe"
        Write-Host "Downloading Inno Setup..."
        Invoke-WebRequest -Uri $url -OutFile $output
        
        Write-Host "Installing Inno Setup..."
        Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/NORESTART" -Wait
        
        # Verify installation
        $isccPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
        if (Test-Path $isccPath) {
            Write-Host "Inno Setup installed successfully at: $isccPath"
        } else {
            Write-Error "Inno Setup installation failed!"
            exit 1
        }
    
    - name: Build Windows
      env:
        Qt6_DIR: ${{ env.Qt6_DIR }}
        QT_ROOT_DIR: ${{ env.QT_ROOT_DIR }}
      run: |
        cd pack
        powershell -ExecutionPolicy Bypass -File windows.ps1
    
    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-package
        path: pack/installer/*-Setup.exe
        retention-days: 30
    
    - name: Upload Windows to Release
      if: github.event_name == 'release'
      run: |
        # Find the installer file
        $installerFile = Get-ChildItem -Path "pack/installer" -Filter "*-Setup.exe" | Select-Object -First 1
        if ($installerFile) {
          Write-Host "Uploading $($installerFile.FullName) to release..."
          gh release upload ${{ github.event.release.tag_name }} "$($installerFile.FullName)" --clobber
        } else {
          Write-Error "No installer file found!"
          exit 1
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.2'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev imagemagick fuse libfuse2
    
    - name: Build Linux
      env:
        Qt6_DIR: ${{ env.Qt6_DIR }}
        QT_ROOT_DIR: ${{ env.QT_ROOT_DIR }}
      run: |
        cd pack
        chmod +x linux.sh
        ./linux.sh
    
    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-package
        path: |
          pack/release/*.AppImage
          pack/deb/*.deb
        retention-days: 30
    
    - name: Upload Linux AppImage to Release
      if: github.event_name == 'release'
      run: |
        # Find the AppImage file
        appimage_file=$(find pack/release -name "*.AppImage" -type f | head -1)
        if [ -n "$appimage_file" ]; then
          echo "Uploading $appimage_file to release..."
          gh release upload ${{ github.event.release.tag_name }} "$appimage_file" --clobber
        else
          echo "No AppImage file found!"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Linux DEB to Release
      if: github.event_name == 'release'
      run: |
        # Find the DEB file
        deb_file=$(find pack/deb -name "*.deb" -type f | head -1)
        if [ -n "$deb_file" ]; then
          echo "Uploading $deb_file to release..."
          gh release upload ${{ github.event.release.tag_name }} "$deb_file" --clobber
        else
          echo "No DEB file found!"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos-arm64:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.2'
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
    
    - name: Install Dependencies
      run: |
        brew install ffmpeg@7
        brew install pkg-config
        # Set up FFmpeg environment variables for Apple Silicon
        echo "FFMPEG_DIR=/opt/homebrew/opt/ffmpeg@7" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/opt/ffmpeg@7/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
    
    - name: Build macOS ARM64
      env:
        Qt6_DIR: ${{ env.Qt6_DIR }}
        QT_ROOT_DIR: ${{ env.QT_ROOT_DIR }}
        FFMPEG_DIR: ${{ env.FFMPEG_DIR }}
        PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
      run: |
        cd pack
        chmod +x macos.sh
        ./macos.sh
    
    - name: Upload macOS ARM64 Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm64-package
        path: pack/release/*.dmg
        retention-days: 30
    
    - name: Upload macOS ARM64 to Release
      if: github.event_name == 'release'
      run: |
        # Find the DMG file
        dmg_file=$(find pack/release -name "*.dmg" -type f | head -1)
        if [ -n "$dmg_file" ]; then
          echo "Uploading $dmg_file to release..."
          gh release upload ${{ github.event.release.tag_name }} "$dmg_file" --clobber
        else
          echo "No DMG file found!"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos-x86_64:
    runs-on: macos-13
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        aqtversion: '==3.1.*'
        version: '6.6.2'
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
    
    - name: Install Dependencies
      run: |
        brew install ffmpeg@7
        brew install pkg-config
        # Set up FFmpeg environment variables for Intel Mac
        echo "FFMPEG_DIR=/usr/local/opt/ffmpeg@7" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/usr/local/opt/ffmpeg@7/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
    
    - name: Build macOS x86_64
      env:
        Qt6_DIR: ${{ env.Qt6_DIR }}
        QT_ROOT_DIR: ${{ env.QT_ROOT_DIR }}
        FFMPEG_DIR: ${{ env.FFMPEG_DIR }}
        PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
      run: |
        cd pack
        chmod +x macos.sh
        ./macos.sh
    
    - name: Upload macOS x86_64 Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-x86_64-package
        path: pack/release/*.dmg
        retention-days: 30
    
    - name: Upload macOS x86_64 to Release
      if: github.event_name == 'release'
      run: |
        # Find the DMG file
        dmg_file=$(find pack/release -name "*.dmg" -type f | head -1)
        if [ -n "$dmg_file" ]; then
          echo "Uploading $dmg_file to release..."
          gh release upload ${{ github.event.release.tag_name }} "$dmg_file" --clobber
        else
          echo "No DMG file found!"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: [build-windows, build-linux, build-macos-arm64, build-macos-x86_64]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Verify Release Assets
      run: |
        echo "All build jobs completed successfully!"
        echo "Release assets should now be available in the GitHub release."
        echo "Release tag: ${{ github.event.release.tag_name }}"
        echo "Release URL: ${{ github.event.release.html_url }}"